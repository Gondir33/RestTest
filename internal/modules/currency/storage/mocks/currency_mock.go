// Code generated by MockGen. DO NOT EDIT.
// Source: currency.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCurrencyStorage is a mock of CurrencyStorage interface.
type MockCurrencyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyStorageMockRecorder
}

// MockCurrencyStorageMockRecorder is the mock recorder for MockCurrencyStorage.
type MockCurrencyStorageMockRecorder struct {
	mock *MockCurrencyStorage
}

// NewMockCurrencyStorage creates a new mock instance.
func NewMockCurrencyStorage(ctrl *gomock.Controller) *MockCurrencyStorage {
	mock := &MockCurrencyStorage{ctrl: ctrl}
	mock.recorder = &MockCurrencyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyStorage) EXPECT() *MockCurrencyStorageMockRecorder {
	return m.recorder
}

// InsertCurrency mocks base method.
func (m *MockCurrencyStorage) InsertCurrency(ctx context.Context, name string, value float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCurrency", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCurrency indicates an expected call of InsertCurrency.
func (mr *MockCurrencyStorageMockRecorder) InsertCurrency(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCurrency", reflect.TypeOf((*MockCurrencyStorage)(nil).InsertCurrency), ctx, name, value)
}
